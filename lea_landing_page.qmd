---
title: "Law Enforcement Agencies"
execute: 
    echo: false
sidebar: false
# css: "/assets/dist/css/bootstrap.min.css"
---

```{=html}
<button id="goback-btn" onclick="goBack()">Back to search</button>
```

```{python}
import sys
from SPARQLWrapper import SPARQLWrapper, JSON
import pandas as pd
import plotly.express as px
from urllib.request import urlopen
import json
from IPython.display import HTML
```

```{python}
endpoint_url = "https://query.wikidata.org/sparql"

query = """
        SELECT DISTINCT ?item ?itemLabel ?coordinates ?officialWebsite WHERE {
            SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
            {
                ?item p:P5008 ?statement0.
                ?statement0 (ps:P5008/(wdt:P279*)) wd:Q120754096.
                ?item p:P31 ?statement1.
                ?statement1 (ps:P31/(wdt:P279*)) wd:Q732717.
                ?item wdt:P625 ?coordinates.
                ?item wdt:P856 ?officialWebsite.
            }
        }
        """


def get_results(endpoint_url, query):
    user_agent = "WDQS-example Python/%s.%s" % (sys.version_info[0], sys.version_info[1])
    # TODO adjust user agent; see https://w.wiki/CX6
    sparql = SPARQLWrapper(endpoint_url, agent=user_agent)
    sparql.setQuery(query)
    sparql.setReturnFormat(JSON)
    return sparql.query().convert()

# API results
results = get_results(endpoint_url, query)["results"]["bindings"]
# df = pd.DataFrame(results)

lea_data = []
lea_names = set()
for result in results:
    last_slash = result["item"]["value"].rindex('/')
    qid = result["item"]["value"][last_slash + 1:]
    name = result["itemLabel"]["value"]
    coordinates = result["coordinates"]
    lea_names.add(name)
    name_and_qid = name + '_' + qid
    lea_data.append({'lea_name': name, 'officialWebsite': result["officialWebsite"]["value"], 'name_plus_id': name_and_qid, 'qid': qid, 'coordinates': coordinates})
# **** ??? open file to generate json file to read and then use for leaflet map 
ojs_define(lea_data = lea_data)
``` 

```{python}
# Map LEA data
df = pd.DataFrame(lea_data)
lat = []
long = []
coords = df['coordinates'].tolist()
for i in range(len(coords)):
  space = coords[i]["value"].index(' ')
  long.append(float(coords[i]["value"][6:space]))
  lat.append(float(coords[i]["value"][space + 1:-1]))
df['Latitude'] = lat
df['Longitude'] = long  
del df['coordinates']
# print(df)
fig_scatter = px.scatter_mapbox(df, 
                  lat='Latitude',
                  lon='Longitude',
                  hover_name= df["lea_name"],
                  hover_data={ 
                                  'Latitude':False,
                                  'Longitude': False
                              },
                  color_continuous_scale=px.colors.cyclical.IceFire, 
                  size_max=15, 
                  zoom=10,
                  mapbox_style="carto-positron")

scatter_trace = fig_scatter.data[0]
scatter_trace.marker.color = "#FF6D2C"  # change dot color
scatter_trace.marker.size = 6  # change dot size

with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:
    counties = json.load(response)
    # ** the file below is hosted locally but I could alternatively write code that removes all the non-CA fip codes from the DF 
df_counties_ca = pd.read_csv("one_col_raw.githubusercontent.com_plotly_datasets_master_fips-unemp-16.csv",  
                   dtype={"fips": str})

fig_ca_counties = px.choropleth_mapbox(df_counties_ca, 
                           geojson=counties, 
                           locations='fips',
                           color_continuous_scale="Viridis",
                           range_color=(0, 12),
                           mapbox_style="carto-positron",
                           zoom=4.7, 
                           center = {"lat": 37.0902, "lon": -120.7129},
                           opacity=0.5,
                          )
fig_ca_counties.update_traces(hoverinfo="none")
fig_ca_counties.update_geos(fitbounds="locations", visible=False)
fig_ca_counties.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
fig_ca_counties.add_trace(
    scatter_trace
)

# customize hover label appearance
fig_ca_counties.update_layout(
    hoverlabel=dict(
        bgcolor="white",
        font_size=12,
        font_family="Rockwell"
    )
)
# fig_scatter.show()
fig_ca_counties.show()
```
```{=html}
<div class="search-bar">
```
```{ojs}
viewof lea_search = Inputs.search(lea_data, 
{placeholder: "Enter a LEA name", 
width: 1500,
})
```
```{=html}
</div>
```
```{=html}
<div class="entries-wrap">
```
```{ojs}
viewof fe_rows = Inputs.table(lea_search, {
  columns: [
    'name_plus_id',
  ],
  format: {
    'name_plus_id': x => {
          // delimiter -
          let indexDelim = x.indexOf('_');
          // everything before is name
          let name = x.substring(0, indexDelim);
          // everything after is ID 
          let iD = x.substring(indexDelim + 1);
          return htl.html`<button type="button" id="${iD}" style="border-radius: 20px;" onclick="showInfoCard(${iD})"" class="options">${name}</button>`
          },
  },
  align: {
    lea_name: "center",
  },
  width: {
    lea_name: 900,
  },
})
```
```{=html}
</div>
```

```{python}
# !pip install IPython.display

# # Define the onclick event function
# show_element = False
# def on_button_click():
#     show_element = True

# # Generate HTML code with a button and the onclick event
# button_html = f"""
# <button id="myButton" onclick="{on_button_click()}">Click me</button>
# """

# # Display the HTML code
# display(HTML(button_html))

# Set a condition to determine whether to show the HTML element

# html = """"""
# if show_element:
for entry in lea_data:
    html = """
    <div id="{}" class="info-card" style="border: 1px solid #ddd; border-radius: 20px; padding: 10px; margin: 10px;">
        <h2>{}</h2>
        <p><a href="{}">Official Website</a></p>
        <p><a href="">Policy Manual</a></p>
        <p><a href="">Military Equipment Inventory</a></p>
    </div>
    """.format(entry['qid'], entry['lea_name'], entry['officialWebsite'])
    display(HTML(html)) 
```


<!-- Load and visualize fatal encounters data -->
```{python}
# sheet_id = "1dKmaV_JiWcG8XBoRgP8b4e9Eopkpgt7FL7nyspvzAsE"
# sheet_name = "sample_1"
# url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/gviz/tq?tqx=out:csv&sheet={sheet_name}"
# df = pd.read_csv(url)

# df['Age'].fillna('Not in Fatal Encounters dataset')
# df_ca_only = df.loc[df['State'] == 'CA']

# Make new, smaller DF with only essential data
# year_and_death_ct = {}

# for lea in lea_names:
  # year_and_death_ct = {}
  # build map for DF for graph
  # for index, row in df_ca_only.iterrows():
  #   if row['Agency or agencies involved'] != lea: continue 
  #   year = row[' Date of injury resulting in death (month/day/year)'][-4:]
  #   year_and_death_ct[year] = 1 + year_and_death_ct.get(year, 0)
  # df_lea_min = pd.DataFrame()
  # df_lea_min['Year'] = year_and_death_ct.keys()
  # df_lea_min['Total Count'] = year_and_death_ct.values()
  # fig = px.bar(df_lea_min, x='Year', y='Total Count')
  # fig.show()

# df_ca_only[' Date of injury resulting in death (month/day/year)'] = df_ca_only[' Date of injury resulting in death (month/day/year)'].apply(lambda x: x[-4:])
# ojs_define(fe_data = df_ca_only)

# for 
# data_canada = px.data.gapminder().query("country == 'Canada'")

# fig = px.bar(df_ca_only, x=' Date of injury resulting in death (month/day/year)', y='count', color='Agency or agencies involved')
# fig.show()
```





```{=html}
<script>
    const outputCells = document.querySelectorAll('.cell');
    const tableCell = outputCells[2];
    const entriesWrap = document.querySelector('.entries-wrap');
    const searchBar = document.querySelector('.search-bar');

    function showInfoCard(btn) {
        // hide table
        tableCell.style.display = 'none';
        entriesWrap.style.display = 'none';
        searchBar.style.display = 'none';
        // show content for only the element clicked
        // debugger;
        let iD = btn.id;
        let infoCard = document.querySelector(`div#${iD}`);
        console.log(infoCard)
        infoCard.style.display = 'block';
        // highlight correct LEA spot on plotly map --** to come **--

        // show back arrow button that will show the map as before and the table of all LEAs
        let goBackBtn = document.querySelector('#goback-btn');
        goBackBtn.style.display = 'block';
    }

    // 2) Event listener for back arrow button
    
    // Function to go back in the browser's history
    function goBack() {
      // window.history.back();
        // hide table
        tableCell.style.display = 'block';
        entriesWrap.style.display = 'block';
        searchBar.style.display = 'block';
        // hide info card
        // debugger;
        let infoCard;
        document.querySelectorAll('.info-card').forEach(element => {
          if (window.getComputedStyle(element).display == 'block') {
            infoCard = element;
          }
        });
        infoCard.style.display = 'none';

        // hide btn again
        let goBackBtn = document.querySelector('#goback-btn');
        goBackBtn.style.display = 'none';
    }

    
</script>
```
