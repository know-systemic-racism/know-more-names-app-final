---
title: "Law Enforcement Agencies"
execute: 
    echo: false
css: "/assets/dist/css/bootstrap.min.css"
---

```{python}
import sys
from SPARQLWrapper import SPARQLWrapper, JSON
import pandas as pd
import plotly.express as px
from urllib.request import urlopen
import json
from IPython.display import HTML
```

```{python}
endpoint_url = "https://query.wikidata.org/sparql"

query = """
        SELECT DISTINCT ?item ?itemLabel ?coordinates ?officialWebsite WHERE {
            SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
            {
                ?item p:P5008 ?statement0.
                ?statement0 (ps:P5008/(wdt:P279*)) wd:Q120754096.
                ?item p:P31 ?statement1.
                ?statement1 (ps:P31/(wdt:P279*)) wd:Q732717.
                ?item wdt:P625 ?coordinates.
                ?item wdt:P856 ?officialWebsite.
            }
        }
        """


def get_results(endpoint_url, query):
    user_agent = "WDQS-example Python/%s.%s" % (sys.version_info[0], sys.version_info[1])
    # TODO adjust user agent; see https://w.wiki/CX6
    sparql = SPARQLWrapper(endpoint_url, agent=user_agent)
    sparql.setQuery(query)
    sparql.setReturnFormat(JSON)
    return sparql.query().convert()

# API results
results = get_results(endpoint_url, query)["results"]["bindings"]
df = pd.DataFrame(results)
lea_data = []
for result in results:
    lea_data.append({'lea_name': result["itemLabel"]["value"], 'officialWebsite': result["officialWebsite"]["value"]})
# def isolate_values(entry):
#   return entry["value"]

# df["itemLabel"] = df["itemLabel"].apply(isolate_values)
# print(df["itemLabel"].tolist())
ojs_define(lea_data = lea_data)
``` 

```{python, echo=FALSE}
# !pip install IPython.display

# # Define the onclick event function
# show_element = False
# def on_button_click():
#     show_element = True

# # Generate HTML code with a button and the onclick event
# button_html = f"""
# <button id="myButton" onclick="{on_button_click()}">Click me</button>
# """

# # Display the HTML code
# display(HTML(button_html))

# Set a condition to determine whether to show the HTML element

# html_content = """"""
# if show_element:
for entry in lea_data:
    html_content = """
    <div style="border: 1px solid #ddd; padding: 10px; margin: 10px;">
        <h2>{}</h2>
        <p><a href="{}">Official Website</a></p>
    </div>
    """.format(entry['lea_name'], entry['officialWebsite'])
    display(HTML(html_content))
```

```{python}
# Map LEA data
lat = []
long = []
coords = df['coordinates'].tolist()

for i in range(len(coords)):
  space = coords[i]["value"].index(' ')
  long.append(float(coords[i]["value"][6:space]))
  lat.append(float(coords[i]["value"][space + 1:-1]))
df['Latitude'] = lat
df['Longitude'] = long  


fig_scatter = px.scatter_mapbox(df, 
                  lat='Latitude',
                  lon='Longitude',
                  hover_name= df["itemLabel"],
                  # hover_data={ 
                  #                 'Age': True, 
                  #                 'Gender': True, 
                  #                 'Race with imputations': True, 
                  #                 ' Date of injury resulting in death (month/day/year)': True, 
                  #                 'Agency or agencies involved': True,
                  #                 'Latitude':False,
                  #                 'Longitude': False
                  #             },
                  color_continuous_scale=px.colors.cyclical.IceFire, 
                  size_max=15, 
                  zoom=10,
                  mapbox_style="carto-positron")

with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:
    counties = json.load(response)
    # ** the file below is hosted locally but I could alternatively write code that removes all the non-CA fip codes from the DF 
df_counties_ca = pd.read_csv("one_col_raw.githubusercontent.com_plotly_datasets_master_fips-unemp-16.csv",  
                   dtype={"fips": str})

fig_ca_counties = px.choropleth_mapbox(df_counties_ca, 
                           geojson=counties, 
                           locations='fips',
                           color_continuous_scale="Viridis",
                           range_color=(0, 12),
                           mapbox_style="carto-positron",
                           zoom=4.7, 
                           center = {"lat": 37.0902, "lon": -120.7129},
                           opacity=0.5,
                          )

fig_ca_counties.update_geos(fitbounds="locations", visible=False)
fig_ca_counties.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
fig_ca_counties.add_trace(
    fig_scatter.data[0]
)

# customize hover label appearance
fig_ca_counties.update_layout(
    hoverlabel=dict(
        bgcolor="white",
        font_size=12,
        font_family="Rockwell"
    )
)
# fig_scatter.show()
# fig_ca_counties.show()
```

```{ojs}
viewof lea_search = Inputs.search(lea_data, 
{placeholder: "Enter a LEA name", 
width: 1500,
label: "Search Law Enforcement Agencies"
})

viewof fe_rows = Inputs.table(lea_search, {
  columns: [
    'lea_name',
  ],
  format: {
    'lea_name': x => htl.html`<button type="button" class="leas">${x}</button>`,
  },
  width: {
    lea_name: 900,
  },
//   height: { 

//   }
})
```



```{=html}
<!-- add event listeners to buttons -->
<script>
    // 1) Event listener for buttons
    // select element 
    let lea_buttons = document.querySelectorAll('.leas');
    const outputCells = document.querySelectorAll('.cell');
    const tableCell = outputCells[2];

    lea_buttons.forEach((btn) => {
        btn.addEventListener("click", myFunction);
    });

    function myFunction() {
        // hide table
        tableCell.style.display = 'none';
        // show content for only the element clicked

        // highlight correct LEA spot on plotly map 

        // show back arrow button that will show the map as before and the table of all LEAs

    }

    // 2) Event listener for back arrow button
</script>
```
