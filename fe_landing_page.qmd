---
title: "Fatal Encounters in California"
execute:
  echo: false
sidebar: false
# css: "/assets/dist/css/bootstrap.min.css"
---

```{=html}
<button id="goback-btn" onclick="goBack()">Back to search</button>
```

```{python}
import sys
from SPARQLWrapper import SPARQLWrapper, JSON 
import pandas as pd
import plotly.express as px
from urllib.request import urlopen
import json
from IPython.display import HTML
```
```{python}
# Pull people Wikidata entries 

endpoint_url = "https://query.wikidata.org/sparql"
query = """SELECT ?person ?personLabel ?placeOfDeathLabel ?sexOrGenderLabel ?ethnicGroupLabel ?dateOfDeathLabel
          WHERE {
            ?person wdt:P5008 wd:Q120754096.
            ?person wdt:P20 ?placeOfDeath.
            ?person wdt:P21 ?sexOrGender.
            ?person wdt:P172 ?ethnicGroup.
            ?person wdt:P570 ?dateOfDeath.

            SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
          }"""

def get_results(endpoint_url, query):
    user_agent = "WDQS-example Python/%s.%s" % (sys.version_info[0], sys.version_info[1])
    # TODO adjust user agent; see https://w.wiki/CX6
    sparql = SPARQLWrapper(endpoint_url, agent=user_agent)
    sparql.setQuery(query)
    sparql.setReturnFormat(JSON)
    return sparql.query().convert()
```
```{python}
# Process API results
person_results = get_results(endpoint_url, query)["results"]["bindings"]
clean_fe_arr = []
for result in person_results:
  last_slash = result["person"]["value"].rindex('/')
  qid = result["person"]["value"][last_slash + 1:]
  name = result["personLabel"]["value"]
  name_and_qid = name + '_' + qid
  clean_fe_arr.append({
                  'full_name': name, 
                  'name_plus_id': name_and_qid, 
                  'qid': qid, 
                  'ethnicGroupLabel': result['ethnicGroupLabel']['value'][:-1], 
                  'sexOrGenderLabel': result['sexOrGenderLabel']['value'],
                  'dateOfDeathLabel': result['dateOfDeathLabel']['value'],
                  'placeOfDeathLabel': result['placeOfDeathLabel']['value']
                })
ojs_define(fe_data = clean_fe_arr)
```
```{python}
# Pull coordinates and titles of death events
endpoint_url = "https://query.wikidata.org/sparql"
query = """SELECT ?person ?personLabel ?coordinates
              WHERE {
                ?person p:P5008 ?statement0.
                ?statement0 (ps:P5008/(wdt:P279*)) wd:Q120754096.
                ?person p:P585 ?statement_1.
                ?statement_1 psv:P585 ?statementValue_1.
                ?statementValue_1 wikibase:timeValue ?P585_1.
                ?person wdt:P625 ?coordinates.
                
                SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
        }"""

def get_results(endpoint_url, query):
    user_agent = "WDQS-example Python/%s.%s" % (sys.version_info[0], sys.version_info[1])
    # TODO adjust user agent; see https://w.wiki/CX6
    sparql = SPARQLWrapper(endpoint_url, agent=user_agent)
    sparql.setQuery(query)
    sparql.setReturnFormat(JSON)
    return sparql.query().convert()

event_results = get_results(endpoint_url, query)["results"]["bindings"]
```
```{python}
# Create a DataFrame 
df = pd.DataFrame(event_results)
lat = []
long = []
coords = df['coordinates'].tolist()
# labels = df["personLabel"].tolist()
# names = []
for i in range(len(coords)):
  space = coords[i]["value"].index(' ')
  long.append(float(coords[i]["value"][6:space]))
  lat.append(float(coords[i]["value"][space + 1:-1]))
  # names.append(labels[i]["value"][9:])
df['Latitude'] = lat
df['Longitude'] = long
# isolate victim name from Wikidata label
def isolate_person_name(entry): 
  return entry["value"][9:]
df["personLabel"] = df["personLabel"].map(isolate_person_name)
# print(df['Latitude'], df['Longitude'], df["personLabel"])
  
fig_scatter = px.scatter_mapbox(df, 
                  lat='Latitude',
                  lon='Longitude',
                  hover_name= df["personLabel"],
                  color_continuous_scale=px.colors.cyclical.IceFire, 
                  size_max=15, 
                  zoom=10,
                  mapbox_style="carto-positron")

scatter_trace = fig_scatter.data[0]
scatter_trace.marker.color = "#FF6D2C"  # change dot color
scatter_trace.marker.size = 6  # change dot size
# scatter_trace.marker.border.color = "black"
# scatter_trace.update_traces(marker=dict(size=12,
#                               line=dict(width=1,
#                                         color='DarkSlateGrey')),
#                   selector=dict(mode='markers')) 


with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:
    counties = json.load(response)
    # ** the file below is hosted locally but I could alternatively write code that removes all the non-CA fip codes from the DF 
df_counties_ca = pd.read_csv("one_col_raw.githubusercontent.com_plotly_datasets_master_fips-unemp-16.csv",  
                   dtype={"fips": str})
fig_ca_counties = px.choropleth_mapbox(df_counties_ca, 
                           geojson=counties, 
                           locations='fips',
                           color_continuous_scale="Viridis",
                           range_color=(0, 12),
                           mapbox_style="carto-positron",
                           zoom=4.7, 
                           center = {"lat": 37.0902, "lon": -120.7129},
                           opacity=0.5,
                          )
fig_ca_counties.update_geos(fitbounds="locations", visible=False)
fig_ca_counties.update_layout(margin={"r":0,"t":0,"l":0,"b":0})

fig_ca_counties.add_trace(
    scatter_trace
)
# customize hover label appearance
fig_ca_counties.update_layout(
    hoverlabel=dict(
        bgcolor="white",
        font_size=12,
        font_family="Rockwell"
    )
)

# fig_scatter.show()
fig_ca_counties.show()
```
```{=html}
<div class="search-bar">
```
```{ojs}
viewof fe_search = Inputs.search(fe_data, 
{placeholder: "Enter a name", 
width: 1500,
})

```
```{=html}
</div>
```
```{=html}
<div class="entries-wrap">
```
```{ojs}
viewof fe_rows = Inputs.table(fe_search, {
  columns: [
    'name_plus_id',
  ],
  format: {
    'name_plus_id': x => {
          // delimiter -
          let indexDelim = x.indexOf('_');
          // everything before is name
          let term = x.substring(0, indexDelim);
          // everything after is ID 
          let iD = x.substring(indexDelim + 1);
          return htl.html`<button type="button" id="${iD}" style="border-radius: 20px;" onclick="showInfoCard(${iD})"" class="options">${term}</button>`
          },
  },
  align: {
    'name_plus_id': "center",
  },
  width: {
    'name_plus_id': 900,
  },
})
```
```{=html}
</div>
```
```{python, echo=FALSE}
for entry in clean_fe_arr:
    html_content = """
    <div id="{}" class="info-card" style="border: 1px solid #ddd; border-radius: 20px; padding: 10px; margin: 10px;">
        <h2>{}</h2>
        <p>{} ({} {}) was killed on {} in {}. To learn more, see this <a>article</a></p>
    </div>
    """.format(entry['qid'], entry['full_name'], entry['full_name'], entry['ethnicGroupLabel'], entry['sexOrGenderLabel'], entry['dateOfDeathLabel'], entry['placeOfDeathLabel'])
    display(HTML(html_content)) 
```


```{=html}
<script>
    const outputCells = document.querySelectorAll('.cell');
    const tableCell = outputCells[2];
    const entriesWrap = document.querySelector('.entries-wrap');
    const searchBar = document.querySelector('.search-bar');

    function showInfoCard(btn) {
        // hide table
        tableCell.style.display = 'none';
        entriesWrap.style.display = 'none';
        searchBar.style.display = 'none';
        // show content for only the element clicked
        // debugger;
        let iD = btn.id;
        let infoCard = document.querySelector(`div#${iD}`);
        console.log(infoCard)
        infoCard.style.display = 'block';
        // highlight correct LEA spot on plotly map --** to come **--

        // show back arrow button that will show the map as before and the table of all LEAs
        let goBackBtn = document.querySelector('#goback-btn');
        goBackBtn.style.display = 'block';
    }

    // 2) Event listener for back arrow button
    
    // Function to go back in the browser's history
    function goBack() {
      // window.history.back();
        // hide table
        tableCell.style.display = 'block';
        entriesWrap.style.display = 'block';
        searchBar.style.display = 'block';
        // hide info card
        // debugger;
        let infoCard;
        document.querySelectorAll('.info-card').forEach(element => {
          if (window.getComputedStyle(element).display == 'block') {
            infoCard = element;
          }
        });
        infoCard.style.display = 'none';

        // hide btn again
        let goBackBtn = document.querySelector('#goback-btn');
        goBackBtn.style.display = 'none';
    }

    
</script>
```
