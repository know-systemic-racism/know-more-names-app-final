---
title: ""
execute: 
    echo: false
# listing:
#   template: home_pg.ejs
#   contents: results
---
```{=html}
<h1 style="text-align: center">Do you know about</h1>
```

```{python}
# !pip install SPARQLWrapper
import sys
from SPARQLWrapper import SPARQLWrapper, JSON
from IPython.display import HTML

endpoint_url = "https://query.wikidata.org/sparql"

query = """
        SELECT DISTINCT ?item ?itemLabel WHERE {
            SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
            {
                SELECT DISTINCT ?item ?itemLabel WHERE {
                ?item p:P5008 ?statement0.
                ?statement0 (ps:P5008/(wdt:P279*)) wd:Q120754096.
                }
            }
        }"""


def get_results(endpoint_url, query):
    user_agent = "WDQS-example Python/%s.%s" % (sys.version_info[0], sys.version_info[1])
    # TODO adjust user agent; see https://w.wiki/CX6
    sparql = SPARQLWrapper(endpoint_url, agent=user_agent)
    sparql.setQuery(query)
    sparql.setReturnFormat(JSON)
    return sparql.query().convert()


results = get_results(endpoint_url, query)["results"]["bindings"]

for i in range(len(results)):
  results[i] = results[i]["itemLabel"]["value"]
```

```{=html}
<h2 id="myCodeCell" style="text-align: center">
```
```{python}
from random import randint
# select 10 random wikidata entries
rand_ints = []
for i in range(10):
  rand_ints.append(randint(0, len(results)))
for ri in rand_ints:
  html_content = """
    <button style="border: 1px solid #ddd; border-radius: 12px;padding: 10px; margin: 10px;font-weight:500">{}</button>
    """.format(results[ri])
  display(HTML(html_content))
```

```{=html}
</h2>
<script>
  document.addEventListener("DOMContentLoaded", function() {
    // Get the code cell content
    var codeCellContent = document.getElementById("myCodeCell").textContent;

    // Execute the code using Quarto's execution API
    quarto.execute(codeCellContent);
  });
</script>
```


