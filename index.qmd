---
title: "Do you know about???"
execute: 
    echo: false
css: "/assets/dist/css/bootstrap.min.css"
# listing:
#   template: home_pg.ejs
#   contents: results
---

```{=HTML}
   <head><script src="../assets/js/color-modes.js"></script>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="Mark Otto, Jacob Thornton, and Bootstrap contributors">
    <meta name="generator" content="Hugo 0.112.5">
    <title>{title}</title>

    <link rel="canonical" href="https://getbootstrap.com/docs/5.3/examples/album/">


<!-- <link href="../assets/dist/css/bootstrap.min.css" rel="stylesheet"> -->

    <style>
      
      button p {

        margin-bottom: 0;

      }

      button p a {

        text-decoration: none;
        color: gray;
      }
      .bd-placeholder-img {
        font-size: 1.125rem;
        text-anchor: middle;
        -webkit-user-select: none;
        -moz-user-select: none;
        user-select: none;
      }

      @media (min-width: 768px) {
        .bd-placeholder-img-lg {
          font-size: 3.5rem;
        }
      }

      .b-example-divider {
        width: 100%;
        height: 3rem;
        background-color: rgba(0, 0, 0, .1);
        border: solid rgba(0, 0, 0, .15);
        border-width: 1px 0;
        box-shadow: inset 0 .5em 1.5em rgba(0, 0, 0, .1), inset 0 .125em .5em rgba(0, 0, 0, .15);
      }

      .b-example-vr {
        flex-shrink: 0;
        width: 1.5rem;
        height: 100vh;
      }

      .bi {
        vertical-align: -.125em;
        fill: currentColor;
      }

      .nav-scroller {
        position: relative;
        z-index: 2;
        height: 2.75rem;
        overflow-y: hidden;
      }

      .nav-scroller .nav {
        display: flex;
        flex-wrap: nowrap;
        padding-bottom: 1rem;
        margin-top: -1px;
        overflow-x: auto;
        text-align: center;
        white-space: nowrap;
        -webkit-overflow-scrolling: touch;
      }

      .btn-bd-primary {
        --bd-violet-bg: #712cf9;
        --bd-violet-rgb: 112.520718, 44.062154, 249.437846;

        --bs-btn-font-weight: 600;
        --bs-btn-color: var(--bs-white);
        --bs-btn-bg: var(--bd-violet-bg);
        --bs-btn-border-color: var(--bd-violet-bg);
        --bs-btn-hover-color: var(--bs-white);
        --bs-btn-hover-bg: #6528e0;
        --bs-btn-hover-border-color: #6528e0;
        --bs-btn-focus-shadow-rgb: var(--bd-violet-rgb);
        --bs-btn-active-color: var(--bs-btn-hover-color);
        --bs-btn-active-bg: #5a23c8;
        --bs-btn-active-border-color: #5a23c8;
      }
      .bd-mode-toggle {
        z-index: 1500;
      }
    </style>

    
  </head>
  <body>




<main>

  <section class="py-5 text-center container">
    <div class="row py-lg-5">
      <div class="col-lg-6 col-md-8 mx-auto">
        <script>
        class SPARQLQueryDispatcher {
        constructor( endpoint ) {
            this.endpoint = endpoint;
        }

            query( sparqlQuery ) {
                const fullUrl = this.endpoint + '?query=' + encodeURIComponent( sparqlQuery );
                const headers = { 'Accept': 'application/sparql-results+json' };

                return fetch( fullUrl, { headers } ).then( body => body.json() );
            }
        }

        const endpointUrl = 'https://query.wikidata.org/sparql';
        const sparqlQuery = `SELECT DISTINCT ?item ?itemLabel WHERE {
                    SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
                    {
                        SELECT DISTINCT ?item ?itemLabel WHERE {
                        ?item p:P5008 ?statement0.
                        ?statement0 (ps:P5008/(wdt:P279*)) wd:Q120754096.
                        }
                    }
                }`;

        const queryDispatcher = new SPARQLQueryDispatcher( endpointUrl );
        queryDispatcher.query( sparqlQuery ).then( 
            // wrap each Wikidata entry in a button and add it dynamically to the html

         );
        </script>
```


<!-- ```{python}
# !pip install SPARQLWrapper
import sys
from SPARQLWrapper import SPARQLWrapper, JSON

endpoint_url = "https://query.wikidata.org/sparql"

query = """
        SELECT DISTINCT ?item ?itemLabel WHERE {
            SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
            {
                SELECT DISTINCT ?item ?itemLabel WHERE {
                ?item p:P5008 ?statement0.
                ?statement0 (ps:P5008/(wdt:P279*)) wd:Q120754096.
                }
            }
        }"""


def get_results(endpoint_url, query):
    user_agent = "WDQS-example Python/%s.%s" % (sys.version_info[0], sys.version_info[1])
    # TODO adjust user agent; see https://w.wiki/CX6
    sparql = SPARQLWrapper(endpoint_url, agent=user_agent)
    sparql.setQuery(query)
    sparql.setReturnFormat(JSON)
    return sparql.query().convert()


results = get_results(endpoint_url, query)

# for result in results["results"]["bindings"]:
```
```{=ejs} 
``` -->
<!-- ``{python}
    print(result["itemLabel"]["value"])  # print all KSR Wikidata entries
``` 
```{=HTML} 
    </button> 
``` -->
<!-- ```{python}
ojs_define(fe_data = results["results"]["bindings"])
``` -->

<!-- ```{ojs}
// concat first name with last name and save it as its own column
fe_data
// viewof search = Inputs.search(fe_data)
// search
``` -->


