---
title: ""
execute: 
    echo: false
sidebar: false
# listing:
#   template: home_pg.ejs
#   contents: results
---

```{=html}

<!-- <head><h1>Do you know about</h1></head> -->
<body style="overflow: hidden;">
<!-- <nav class="navbar navbar-expand-lg"></nav> -->
```

```{python}
import sys
from SPARQLWrapper import SPARQLWrapper, JSON
from IPython.display import HTML
import random
```

```{python}
# !pip install SPARQLWrapper
endpoint_url = "https://query.wikidata.org/sparql"

query = """
        SELECT ?item ?itemLabel (GROUP_CONCAT(DISTINCT ?instanceOfLabel; SEPARATOR=", ") AS ?instanceOfLabels)
        WHERE {
          SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
          {
            SELECT DISTINCT ?item ?itemLabel ?instanceOfLabel
            WHERE {
              ?item p:P5008 ?statement0.
              ?statement0 (ps:P5008/(wdt:P279*)) wd:Q120754096.
              OPTIONAL { ?item wdt:P31 ?instanceOf.  # Optional: Retrieve instance of property
                        ?instanceOf rdfs:label ?instanceOfLabel. FILTER(LANG(?instanceOfLabel) = "en") }
            }
          }
        } 
        GROUP BY ?item ?itemLabel
          """


def get_results(endpoint_url, query):
    user_agent = "WDQS-example Python/%s.%s" % (sys.version_info[0], sys.version_info[1])
    # TODO adjust user agent; see https://w.wiki/CX6
    sparql = SPARQLWrapper(endpoint_url, agent=user_agent)
    sparql.setQuery(query)
    sparql.setReturnFormat(JSON)
    return sparql.query().convert()


results = get_results(endpoint_url, query)["results"]["bindings"]

for i in range(len(results)):
  results[i] = {"label": results[i]["itemLabel"]["value"], "instanceOf": results[i]["instanceOfLabels"]["value"]}
```

```{=html}
<div class="scrolling-names" style="text-align: center">
```
```{python}
# from random import randint
# select 10 random wikidata entries
# rand_ints = []
# for i in range(10):
#   rand_ints.append(randint(0, len(results)))
# print(len(results))
random.shuffle(results)  # shuffle results 
for i in range(len(results)):
  wk_entry = results[i]
  label = wk_entry["label"]
  # add "the" to death event entries
  if label[:5] == 'death':
    label = 'The ' + label

  # check "instance of" property and set href's according to this 
  href = '#'
  instance_of = wk_entry["instanceOf"]
  try: 
    comma_index = instance_of.index(',')
  except:
    comma_index = None

  if instance_of == "human":
    href = '/fe_landing_page.html'
  if instance_of[:comma_index] == "law enforcement agency":
    href = '/lea_landing_page.html'
  if instance_of[:comma_index] == "homicide" or instance_of[:comma_index] == "medical emergency" or instance_of[:comma_index] == "death":
    href = '/fe_landing_page.html'

  # create and render HTML element
  anchors = """
    <a href="{}" type="button" class="home-pg-btns">{}</a>
    """.format(href, label)
  display(HTML(anchors))
```

```{=html} 
  </div>
</body>
<script>
  let lastHeaderElem = document.querySelector("nav");
  lastHeaderElem.insertAdjacentHTML('afterend', "<h1 id='home-pg-title'>Do you know about</h1>");
</script>
```


